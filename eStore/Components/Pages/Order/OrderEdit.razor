@page "/orders/edit/{id:int}"
@using BusinessObject.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Services.InterfaceService
@inject Services.InterfaceService.IOrderService OrderService
@inject Services.InterfaceService.IOrderDetailService OrderDetailService
@inject Services.InterfaceService.IMemberService MemberService
@inject Services.InterfaceService.IProductService ProductService
@inject NavigationManager Navigation
@inject IServiceScopeFactory ScopeFactory
@rendermode InteractiveServer

<div class="container mt-4">
    <h3 class="mb-4 text-primary">Edit Order #@Id</h3>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center my-3">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading order details...</p>
        </div>
    }
    else if (order == null)
    {
        <div class="alert alert-warning">Order #@Id not found.</div>
    }
    else if (members == null || !members.Any())
    {
        <div class="alert alert-warning">No members available. Please add a member first.</div>
    }
    else
    {
        <div class="card shadow-sm p-4">
            <EditForm Model="order" OnValidSubmit="UpdateOrder">
                <DataAnnotationsValidator />
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label"><i class="bi bi-person me-2"></i>Member</label>
                            <InputSelect class="form-control" @bind-Value="order.MemberId">
                                <option value="0" disabled>Select a member</option>
                                @foreach (var member in members)
                                {
                                    <option value="@member.MemberId">@member.Email</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => order.MemberId)" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label"><i class="bi bi-calendar me-2"></i>Order Date</label>
                            <InputDate class="form-control" @bind-Value="order.OrderDate" />
                            <ValidationMessage For="@(() => order.OrderDate)" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label"><i class="bi bi-calendar-check me-2"></i>Required Date</label>
                            <InputDate class="form-control" @bind-Value="order.RequiredDate" />
                            <ValidationMessage For="@(() => order.RequiredDate)" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label"><i class="bi bi-truck me-2"></i>Shipped Date</label>
                            <InputDate class="form-control" @bind-Value="order.ShippedDate" />
                            <ValidationMessage For="@(() => order.ShippedDate)" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label"><i class="bi bi-currency-dollar me-2"></i>Freight</label>
                            <InputNumber class="form-control" @bind-Value="order.Freight" />
                            <ValidationMessage For="@(() => order.Freight)" class="text-danger" />
                        </div>
                    </div>
                </div>

                <!-- Order Details Section -->
                <h5 class="mt-4">Order Details</h5>
                <table class="table table-striped">
                    <thead>
                    <tr>
                        <th>Product</th>
                        <th>Unit Price</th>
                        <th>Quantity</th>
                        <th>Discount</th>
                        <th>Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (order.OrderDetails != null)
                    {
                        @foreach (var detail in order.OrderDetails)
                        {
                            <tr>
                                <td>
                                    <InputSelect class="form-control" @bind-Value="detail.ProductId">
                                        @foreach (var product in products)
                                        {
                                            <option value="@product.ProductId">@product.ProductName</option>
                                        }
                                    </InputSelect>
                                </td>
                                <td>
                                    <InputNumber class="form-control" @bind-Value="detail.UnitPrice" />
                                </td>
                                <td>
                                    <InputNumber class="form-control" @bind-Value="detail.Quantity" />
                                </td>
                                <td>
                                    <InputNumber class="form-control" @bind-Value="detail.Discount" />
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveOrderDetail(detail)">
                                        <i class="bi bi-trash"></i> Remove
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    </tbody>
                </table>

                <!-- Add New Order Detail -->
                @if (showAddProduct)
                {
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <InputSelect class="form-control" @bind-Value="newOrderDetail.ProductId">
                                @foreach (var product in products)
                                {
                                    <option value="@product.ProductId">@product.ProductName</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-2">
                            <InputNumber class="form-control" @bind-Value="newOrderDetail.UnitPrice" />
                        </div>
                        <div class="col-md-2">
                            <InputNumber class="form-control" @bind-Value="newOrderDetail.Quantity" />
                        </div>
                        <div class="col-md-2">
                            <InputNumber class="form-control" @bind-Value="newOrderDetail.Discount" />
                        </div>
                        <div class="col-md-3">
                            <button type="button" class="btn btn-success btn-sm" @onclick="AddProductToOrder">
                                <i class="bi bi-plus-circle"></i> Add
                            </button>
                            <button type="button" class="btn btn-secondary btn-sm" @onclick="() => showAddProduct = false">
                                <i class="bi bi-x-circle"></i> Cancel
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <button type="button" class="btn btn-primary btn-sm mb-3" @onclick="() => showAddProduct = true">
                        <i class="bi bi-plus-circle"></i> Add Product
                    </button>
                }

                <div class="d-flex gap-2 mt-3">
                    <button type="submit" class="btn btn-primary" disabled="@isLoading">
                        <i class="bi bi-save me-2"></i>Update Order
                    </button>
                    <NavLink class="btn btn-outline-secondary" href="/orders">
                        <i class="bi bi-x-circle me-2"></i>Cancel
                    </NavLink>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Order order;
    private List<Member> members = new();
    private List<Product> products = new();
    private OrderDetail newOrderDetail = new();
    private string errorMessage;
    private string successMessage;
    private bool isLoading = true;
    private bool showAddProduct = false;
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            // Load Order
            order = await OrderService.GetOrderById(Id);
            if (order == null)
            {
                errorMessage = $"Order with ID {Id} not found.";
                return;
            }

            // Load OrderDetails if not included
            if (order.OrderDetails == null || !order.OrderDetails.Any())
            {
                var orderDetails = await OrderDetailService.GetOrderDetails(Id);
                order.OrderDetails = orderDetails?.ToList() ?? new List<OrderDetail>();
            }

            // Load Members
            members = (await MemberService.GetAllMembersAsync())?.ToList() ?? new List<Member>();
            if (!members.Any())
            {
                errorMessage = "No members found in the system.";
                return;
            }

            // Load Products
            products = (await ProductService.GetAllProducts())?.ToList() ?? new List<Product>();
            if (products.Any())
            {
                var firstProduct = products.First();
                newOrderDetail = new OrderDetail
                {
                    OrderId = order.OrderId,
                    ProductId = firstProduct.ProductId,
                    UnitPrice = firstProduct.UnitPrice,
                    Quantity = 1,
                    Discount = 0,
                    MemberId = order.MemberId
                };
            }

            // Khởi tạo SignalR
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/orderHub"))
                .Build();

            hubConnection.On<int>("OrderUpdated", (orderId) =>
            {
                if (orderId == Id)
                {
                    successMessage = $"Order #{orderId} has been updated!";
                    StateHasChanged();
                }
            });

            await hubConnection.StartAsync();
            Console.WriteLine($"SignalR connected in OrderEdit for OrderId: {Id}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
            if (ex.InnerException != null)
            {
                errorMessage += $" Inner exception: {ex.InnerException.Message}";
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void AddProductToOrder()
    {
        if (newOrderDetail != null && order.OrderDetails != null)
        {
            newOrderDetail.OrderId = order.OrderId;
            order.OrderDetails.Add(newOrderDetail);
            newOrderDetail = new OrderDetail
            {
                OrderId = order.OrderId,
                ProductId = products.First().ProductId,
                UnitPrice = products.First().UnitPrice,
                Quantity = 1,
                Discount = 0,
                MemberId = order.MemberId
            };
            showAddProduct = false;
            StateHasChanged();
        }
    }

    private async Task RemoveOrderDetail(OrderDetail detail)
    {
        if (order.OrderDetails != null)
        {
            if (detail.OrderDetailId > 0) // Nếu là detail đã tồn tại trong DB
            {
                await OrderDetailService.DeleteOrderDetailById(detail.OrderDetailId);
            }
            order.OrderDetails.Remove(detail);
            StateHasChanged();
        }
    }

    private async Task UpdateOrder()
    {
        if (order.MemberId == 0)
        {
            errorMessage = "Please select a member.";
            return;
        }

        try
        {
            isLoading = true;
            StateHasChanged();

            using (var scope = ScopeFactory.CreateScope())
            {
                var orderService = scope.ServiceProvider.GetRequiredService<IOrderService>();
                var orderDetailService = scope.ServiceProvider.GetRequiredService<IOrderDetailService>();

                var existingDetails = await orderDetailService.GetOrderDetails(order.OrderId);
                var existingDetailIds = existingDetails.Select(d => d.OrderDetailId).ToHashSet();

                await orderService.UpdateOrder(order);

                if (order.OrderDetails != null)
                {
                    foreach (var detail in order.OrderDetails)
                    {
                        if (detail.OrderDetailId > 0)
                        {
                            await orderDetailService.UpdateOrderDetail(detail);
                            existingDetailIds.Remove(detail.OrderDetailId);
                        }
                        else
                        {
                            await orderDetailService.CreateOrderDetail(detail);
                        }
                    }

                    foreach (var deletedId in existingDetailIds)
                    {
                        await orderDetailService.DeleteOrderDetailById(deletedId);
                    }
                }
            }

            successMessage = "Order and details updated successfully!";
            await hubConnection.SendAsync("SendOrderUpdated", order.OrderId);
            Navigation.NavigateTo("/orders");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating order: {ex.Message}";
            if (ex.InnerException != null)
            {
                errorMessage += $" Inner exception: {ex.InnerException.Message}";
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}