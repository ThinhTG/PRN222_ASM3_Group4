@page "/orders/details/{OrderId:int}"
@using BusinessObject.Models
@using Services.InterfaceService
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IOrderService OrderService
@inject IOrderDetailService OrderDetailService
@inject IProductService ProductService
@inject IMemberService MemberService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@* @attribute [Authorize] *@

<h3>Order Details</h3>

@if (loading)
{
    <p><em>Loading...</em></p>
}
else if (order == null)
{
    <p>Order not found.</p>
}
else
{
    <div class="card mb-4">
        <div class="card-header">
            <h4>Order #@order.OrderId</h4>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <dl class="row">
                        <dt class="col-sm-4">Member:</dt>
                        <dd class="col-sm-8">@(member?.Email ?? "Unknown")</dd>

                        <dt class="col-sm-4">Order Date:</dt>
                        <dd class="col-sm-8">@order.OrderDate.ToString("dd/MM/yyyy")</dd>

                        <dt class="col-sm-4">Required Date:</dt>
                        <dd class="col-sm-8">@(order.RequiredDate.HasValue ? order.RequiredDate.Value.ToString("dd/MM/yyyy") : "N/A")</dd>
                    </dl>
                </div>
                <div class="col-md-6">
                    <dl class="row">
                        <dt class="col-sm-4">Shipped Date:</dt>
                        <dd class="col-sm-8">@(order.ShippedDate.HasValue ? order.ShippedDate.Value.ToString("dd/MM/yyyy") : "Not shipped yet")</dd>

                        <dt class="col-sm-4">Freight:</dt>
                        <dd class="col-sm-8">@(order.Freight.HasValue ? order.Freight.Value.ToString("C") : "N/A")</dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>

    <h4>Order Items</h4>

    @if (orderDetails == null || !orderDetails.Any())
    {
        <p>No items found for this order.</p>
    }
    else
    {
        <table class="table">
            <thead>
            <tr>
                <th>Product</th>
                <th>Unit Price</th>
                <th>Quantity</th>
                <th>Discount</th>
                <th>Total</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var detail in orderDetails)
            {
                var productName = productNames.ContainsKey(detail.ProductId) ? productNames[detail.ProductId] : "Unknown";
                var totalPrice = detail.UnitPrice * detail.Quantity * (1 - (decimal)detail.Discount);

                <tr>
                    <td>@productName</td>
                    <td>@detail.UnitPrice.ToString("C")</td>
                    <td>@detail.Quantity</td>
                    <td>@(((decimal)detail.Discount * 100).ToString("F0"))%</td>
                    <td>@totalPrice.ToString("C")</td>
                </tr>
            }
            </tbody>
            <tfoot>
            <tr>
                <th colspan="4" class="text-right">Subtotal:</th>
                <th>@orderSubtotal.ToString("C")</th>
            </tr>
            <tr>
                <th colspan="4" class="text-right">Freight:</th>
                <th>@(order.Freight.HasValue ? order.Freight.Value.ToString("C") : "N/A")</th>
            </tr>
            <tr>
                <th colspan="4" class="text-right">Total:</th>
                <th>@(order.Freight.HasValue ? (orderSubtotal + order.Freight.Value).ToString("C") : orderSubtotal.ToString("C"))</th>
            </tr>
            </tfoot>
        </table>
    }

    <div class="mt-3">
        <a href="/orders" class="btn btn-secondary">Back to Orders</a>
        @if (isAdmin)
        {
            <a href="/orders/edit/@OrderId" class="btn btn-warning">Edit Order</a>
        }
    </div>
}

@code {
    [Parameter]
    public int OrderId { get; set; }

    private Order order;
    private Member member;
    private IEnumerable<OrderDetail> orderDetails;
    private Dictionary<int, string> productNames = new Dictionary<int, string>();
    private decimal orderSubtotal = 0;
    private bool loading = true;
    private bool isAdmin = false;
    private int currentMemberId = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAdmin = user.IsInRole("Admin");
        var memberIdClaim = user.FindFirst("MemberId");
        if (memberIdClaim != null)
        {
            currentMemberId = int.Parse(memberIdClaim.Value);
        }

        await LoadOrderDetails();
    }

    private async Task LoadOrderDetails()
    {
        try
        {
            order = await OrderService.GetOrderById(OrderId);

            if (order != null && !isAdmin && order.MemberId != currentMemberId)
            {
                NavigationManager.NavigateTo("/unauthorized");
                return;
            }

            if (order != null)
            {
                member =  await MemberService.GetMemberByIdAsync(order.MemberId); 
                orderDetails = await OrderDetailService.GetOrderDetails(OrderId);

                if (orderDetails != null)
                {
                    foreach (var detail in orderDetails)
                    {
                        var product = ProductService.GetById(detail.ProductId); // Assuming correct method name and added await
                        if (product != null)
                        {
                            productNames[detail.ProductId] = product.ProductName;
                        }

                        decimal itemTotal = detail.UnitPrice * detail.Quantity * (1 - (decimal)detail.Discount);
                        orderSubtotal += itemTotal;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading order details: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }
}