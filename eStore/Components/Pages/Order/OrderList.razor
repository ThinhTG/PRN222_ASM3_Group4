@page "/orders"
@using BusinessObject.Models
@using Services.InterfaceService
@using Microsoft.AspNetCore.SignalR.Client
@using System.Collections.ObjectModel
@inject IOrderService OrderService
@inject NavigationManager NavigationManager
@inject IServiceScopeFactory ScopeFactory

<h3>Order List</h3>

@if (loading)
{
    <p><em>Loading...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
    <div class="mb-3">
        <a href="/orders/add" class="btn btn-primary">Create New Order</a>
    </div>
}
else
{
    <div class="mb-3">
        <a href="/orders/add" class="btn btn-primary">Create New Order</a>
    </div>

    @if (orders == null || !orders.Any())
    {
        <p>No orders found.</p>
    }
    else
    {
        <table class="table">
            <thead>
            <tr>
                <th>Order ID</th>
                <th>Member ID</th>
                <th>Order Date</th>
                <th>Required Date</th>
                <th>Shipped Date</th>
                <th>Freight</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var order in orders)
            {
                Console.WriteLine($"Rendering Order ID: {order.OrderId}, Freight: {order.Freight}");
                <tr>
                    <td>@order.OrderId</td>
                    <td>@order.MemberId</td>
                    <td>@order.OrderDate.ToString("dd/MM/yyyy")</td>
                    <td>@(order.RequiredDate.HasValue ? order.RequiredDate.Value.ToString("dd/MM/yyyy") : "N/A")</td>
                    <td>@(order.ShippedDate.HasValue ? order.ShippedDate.Value.ToString("dd/MM/yyyy") : "N/A")</td>
                    <td>@(order.Freight.HasValue ? order.Freight.Value.ToString("C") : "N/A")</td>
                    <td>
                        <a href="/orders/details/@order.OrderId" class="btn btn-info btn-sm">Details</a>
                        <a href="/orders/edit/@order.OrderId" class="btn btn-warning btn-sm">Edit</a>
                        <a href="/orders/delete/@order.OrderId" class="btn btn-danger btn-sm">Delete</a>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
}

@code {
    private ObservableCollection<Order> orders = new ObservableCollection<Order>();
    private bool loading = true;
    private string errorMessage;
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/orderHub"))
            .Build();

        hubConnection.On<int>("OrderCreated", async (orderId) =>
        {
            Console.WriteLine($"Received OrderCreated event for OrderId: {orderId}");
            await LoadOrders();
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int>("OrderUpdated", async (orderId) =>
        {
            Console.WriteLine($"Received OrderUpdated event for OrderId: {orderId}");
            await LoadOrders();
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int>("OrderDeleted", async (orderId) =>
        {
            Console.WriteLine($"Received OrderDeleted event for OrderId: {orderId}");
            await LoadOrders();
            await InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connected successfully in OrderList");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error connecting to SignalR: {ex.Message}";
        }

        await LoadOrders();
    }
    

private async Task LoadOrders()
{
    try
    {
        loading = true;
        using (var scope = ScopeFactory.CreateScope())
        {
            var orderService = scope.ServiceProvider.GetRequiredService<IOrderService>();
            var newOrders = await orderService.GetAllOrders();
            orders.Clear();
            foreach (var order in newOrders)
            {
                orders.Add(order);
            }
            Console.WriteLine($"Loaded {orders.Count} orders");
            foreach (var order in orders)
            {
                Console.WriteLine($"Order ID: {order.OrderId}, Freight: {order.Freight}");
            }
            if (orders == null || !orders.Any())
            {
                errorMessage = "No orders found in the system.";
            }
            else
            {
                errorMessage = null;
            }
        }
    }
    catch (Exception ex)
    {
        errorMessage = $"Error loading orders: {ex.Message}";
    }
    finally
    {
        loading = false;
        await InvokeAsync(StateHasChanged);
    }
}

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}