@page "/cart"
@using BusinessObject.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Services.InterfaceService
@inject IOrderService OrderService
@inject IOrderDetailService OrderDetailService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@using Services.Service
@rendermode InteractiveServer

<h3 class="mb-4 text-primary">Cart List</h3>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}

@if (loading)
{
    <p><em>Loading...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else
{
    @if (orderDetails == null || !orderDetails.Any())
    {
        <p>No items in cart.</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Product Name</th>
                    <th>Unit Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in orderDetails)
                {
                    <tr>
                        <td>@order.Product.ProductName</td>
                        <td>@order.UnitPrice</td>
                        <td>@order.Quantity</td>
                        <td>@(order.UnitPrice * order.Quantity)</td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteFromCart(order)">Remove</button>
                        </td>
                    </tr>
                }
                <tr>
                    <td colspan="3" class="text-right"><strong>Order Total:</strong></td>
                    <td><strong>@orderDetails.Sum(od => od.UnitPrice * od.Quantity)</strong></td>
                    <td></td>
                </tr>
            </tbody>
        </table>

        <div class="mb-3">
            <button class="btn btn-success" @onclick="PlaceOrder">Place Order</button>
        </div>
    }
}

@code {
    private IEnumerable<OrderDetail> orderDetails;
    private bool loading = true;
    private string errorMessage;
    private string successMessage;
    private int memberId;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        try
        {
            var customAuthStateProvider = (CustomAuthStateProvider)AuthenticationStateProvider;
            await customAuthStateProvider.InitializeAsync();
            StateHasChanged();
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var memberIdStr = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(memberIdStr))
            {
                errorMessage = "You must be logged in to view your cart.";
                return;
            }

            memberId = int.Parse(memberIdStr);
            orderDetails = await OrderDetailService.GetOrderDetailsByMemberId(memberId);

            // Filter to only get items with null OrderId (cart items)
            orderDetails = orderDetails.Where(od => od.OrderId == null).ToList();

            if (orderDetails == null || !orderDetails.Any())
            {
                errorMessage = "No items in your cart.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading cart: {ex.Message}";
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task DeleteFromCart(OrderDetail orderDetail)
    {
        try
        {
            await OrderDetailService.DeleteOrderDetailById(orderDetail.OrderDetailId);
            successMessage = $"Removed {orderDetail.Product.ProductName} from your cart.";
            await LoadOrders();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error removing item from cart: {ex.Message}";
        }
    }

    private async Task PlaceOrder()
    {
        try
        {
            if (orderDetails == null || !orderDetails.Any())
            {
                errorMessage = "Cannot place an order with an empty cart.";
                return;
            }

            // 1. Create a new Order
            var newOrder = new Order
                {
                    MemberId = memberId,
                    OrderDate = DateTime.Now,
                    RequiredDate = DateTime.Now.AddDays(7), // Default shipping time
                    ShippedDate = null, // Not shipped yet
                    Freight = 0, // You might calculate this based on items or address
                                 // Add any other required Order properties
                };

            // 2. Save the order to get its ID
            int orderId = await OrderService.CreateOrderReturn(newOrder);

            // 3. Update all OrderDetails with the new OrderId
            foreach (var detail in orderDetails)
            {
                detail.OrderId = orderId;
                await OrderDetailService.UpdateOrderDetail(detail);
            }

            // 4. Show success message and redirect to order confirmation
            successMessage = "Order placed successfully!";
            NavigationManager.NavigateTo($"/ordersHistory/details/{orderId}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error placing order: {ex.Message}";
        }
    }
}

<style>
    /* Tiêu đề */
    h3 {
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 1.5px;
        color: #007bff;
        text-align: center;
        margin-bottom: 30px;
        padding-bottom: 10px;
        border-bottom: 3px solid #007bff;
        display: inline-block;
        width: auto;
        box-shadow: 0 2px 5px rgba(0, 123, 255, 0.2);
    }

    /* Thông báo */
    .alert {
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 20px;
        font-weight: 500;
        text-align: center;
        max-width: 600px;
        margin-left: auto;
        margin-right: auto;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    /* Trạng thái tải */
    p em {
        font-style: italic;
        color: #6c757d;
        text-align: center;
        font-size: 1.1rem;
        margin: 20px 0;
    }

    /* Thông báo giỏ hàng trống */
    p {
        text-align: center;
        font-size: 1.2rem;
        color: #6c757d;
        margin: 30px 0;
    }

    /* Bảng */
    .table {
        width: 100%;
        margin-bottom: 30px;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #fff;
    }

        .table thead {
            background-color: #007bff;
            color: white;
        }

        .table th {
            font-weight: 600;
            padding: 15px;
            text-align: center;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .table tbody tr {
            transition: background-color 0.3s ease;
        }

            .table tbody tr:hover {
                background-color: #f1f3f5;
            }

        .table td {
            padding: 15px;
            vertical-align: middle;
            text-align: center;
        }

    .text-right {
        text-align: right !important;
    }

    .table tbody tr:last-child td {
        font-weight: 700;
        color: #343a40;
        border-top: 2px solid #dee2e6;
    }

    /* Nút bấm */
    .btn {
        padding: 8px 16px;
        border-radius: 6px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-sm {
        padding: 5px 10px;
        font-size: 0.9rem;
    }

    .btn-danger {
        background-color: #dc3545;
        border: none;
    }

        .btn-danger:hover {
            background-color: #c82333;
            transform: scale(1.05);
        }

    .btn-success {
        background-color: #28a745;
        border: none;
    }

        .btn-success:hover {
            background-color: #218838;
            transform: scale(1.05);
        }

    /* Khoảng cách cho nút Place Order */
    .mb-3 {
        text-align: center;
        margin-top: 20px;
    }
</style>