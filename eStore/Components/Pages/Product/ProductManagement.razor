@page "/products"
@using BusinessObject.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@inject Services.InterfaceService.IProductService ProductService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<CascadingAuthenticationState>
	<div class="container mt-4">
		<h3 class="mb-4 text-primary">Product Management</h3>

		<div class="card shadow-sm p-3 mb-4">
			<div class="d-flex justify-content-between align-items-center">
				@if (isAdmin)
				{
					<NavLink class="btn btn-primary" href="/products/add">
						<i class="bi bi-plus-circle me-2"></i>Add New Product
				</NavLink>
				}
				<div class="d-flex gap-3">
					<div class="input-group w-auto">
						<span class="input-group-text"><i class="bi bi-search"></i></span>
						<input type="text" class="form-control" placeholder="Search by name"
							   @bind="searchName" @bind:event="oninput" />
					</div>
					<div class="input-group w-auto">
						<span class="input-group-text">$</span>
						<input type="number" class="form-control" placeholder="Search by price"
							   @bind="searchPrice" @bind:event="oninput" />
					</div>
					<button class="btn btn-outline-secondary" @onclick="SearchProducts">
						<i class="bi bi-funnel me-2"></i>Filter
					</button>
				</div>
			</div>
		</div>

		@if (!string.IsNullOrEmpty(errorMessage))
		{
			<div class="alert alert-danger alert-dismissible fade show" role="alert">
				@errorMessage
				<button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
			</div>
		}

		<div class="card shadow-sm">
			<div class="table-responsive">
				<table class="table table-hover mb-0">
					<thead class="table-light">
						<tr>
							<th>ID</th>
							<th>Name</th>
							<th>Category</th>
							<th class="text-end">Price</th>
							<th class="text-end">Stock</th>
							<th>Image</th>
							<th>Actions</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var product in products)
						{
							<tr>
								<td>@product.ProductId</td>
								<td>
									<a href="@($"/products/details/{product.ProductId}")" class="text-primary text-decoration-none">
										@product.ProductName
									</a>
								</td>
								<td>@(product.Category?.CategoryName ?? "N/A")</td>
								<td class="text-end">@product.UnitPrice.ToString("C")</td>
								<td class="text-end">@product.UnitsInStock</td>
								<td>
									@if (!string.IsNullOrEmpty(product.ImageUrl))
									{
										<img src="@product.ImageUrl" alt="@product.ProductName"
											 class="img-thumbnail" style="width: 50px; height: 50px; object-fit: cover;" />
									}
									else
									{
										<span class="text-muted">No Image</span>
									}
								</td>
								@if (isAdmin == true)
								{
									<td>
										<div class="btn-group" role="group">
											<NavLink class="btn btn-sm btn-outline-warning"
													 href="@($"/products/edit/{product.ProductId}")">
												<i class="bi bi-pencil"></i>
											</NavLink>
											<NavLink class="btn btn-sm btn-outline-danger"
													 href="@($"/products/delete/{product.ProductId}")">
												<i class="bi bi-trash"></i>
											</NavLink>
										</div>
									</td>
								}
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
	</div>
</CascadingAuthenticationState>

<style>
	/* Global Styles */
	body {
		background-color: #f5f7fa;
		font-family: 'Poppins', sans-serif;
	}

	.container {
		max-width: 1200px;
	}

	/* Title Styling */
	h3.text-primary {
		font-weight: 800;
		text-transform: uppercase;
		letter-spacing: 2px;
		color: #007bff;
		text-align: center;
		background: linear-gradient(90deg, #007bff, #00c6ff);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		font-size: 2rem;
		padding-bottom: 10px;
		border-bottom: 3px solid #007bff;
		display: inline-block;
		box-shadow: 0px 2px 5px rgba(0, 123, 255, 0.2);
	}


	/* Card Styling */
	.card {
		border-radius: 12px;
		border: none;
		box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
		background: #ffffff;
	}

		.card .btn {
			border-radius: 8px;
			transition: all 0.3s ease-in-out;
		}

	/* Search and Filter Section */
	.input-group-text {
		background-color: #007bff;
		color: white;
		border-radius: 8px 0 0 8px;
	}

	.input-group .form-control {
		border-radius: 0 8px 8px 0;
		transition: 0.3s;
	}

		.input-group .form-control:focus {
			border-color: #007bff;
			box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
		}

	.btn-outline-secondary:hover {
		background-color: #007bff;
		color: white;
		border-color: #007bff;
	}

	/* Table Styling */
	.table {
		border-radius: 12px;
		overflow: hidden;
		background: #ffffff;
	}

		.table thead {
			background-color: #007bff;
			color: white;
			font-weight: bold;
			text-transform: uppercase;
		}

		.table tbody tr:hover {
			background-color: #f0f8ff;
			transition: 0.3s;
		}

		.table tbody tr td {
			vertical-align: middle;
		}

	/* Image Styling */
	.img-thumbnail {
		border-radius: 8px;
		transition: 0.3s;
	}

		.img-thumbnail:hover {
			transform: scale(1.1);
			box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
		}

	/* Button Group Styling */
	.btn-group .btn {
		padding: 6px 12px;
		transition: 0.3s;
		border-radius: 6px;
	}

	.btn-outline-warning {
		border-color: #ffc107;
		color: #ffc107;
	}

		.btn-outline-warning:hover {
			background-color: #ffc107;
			color: white;
		}

	.btn-outline-danger {
		border-color: #dc3545;
		color: #dc3545;
	}

		.btn-outline-danger:hover {
			background-color: #dc3545;
			color: white;
		}

	/* Hover Effect for Buttons */
	.btn-group .btn:hover {
		transform: scale(1.05);
	}

</style>

@code {
	private IEnumerable<Product> products = Enumerable.Empty<Product>();
	private string searchName = string.Empty;
	private decimal? searchPrice = null;
	private string errorMessage;
	private bool isAdmin = false;
	private HubConnection? hubConnection;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			// Xác thực và kiểm tra quyền admin
			var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
			var user = authState.User;
			isAdmin = user.IsInRole("Admin");

			// Tải danh sách sản phẩm ban đầu
			await LoadProducts();

			// Khởi tạo kết nối SignalR
			hubConnection = new HubConnectionBuilder()
				.WithUrl(Navigation.ToAbsoluteUri("/hub"))
				.Build();

			// Đăng ký các sự kiện từ Hub
			hubConnection.On("Created", async () =>
			{
				await LoadProducts();
				await InvokeAsync(StateHasChanged);
			});

			hubConnection.On("Updated", async () =>
			{
				await LoadProducts();
				await InvokeAsync(StateHasChanged);
			});

			

			hubConnection.On("Deleted", async () =>
			{
				await LoadProducts();
				await InvokeAsync(StateHasChanged);
			});

			// Bắt đầu kết nối
			await hubConnection.StartAsync();
		}
		catch (Exception ex)
		{
			errorMessage = $"Error initializing: {ex.Message}";
		}
	}

	private async Task LoadProducts()
	{
		try
		{
			products = await ProductService.GetAll();
			if (!products.Any())
			{
				errorMessage = "No products found. Please add a new product.";
			}
			else
			{
				errorMessage = null;
			}
		}
		catch (Exception ex)
		{
			errorMessage = $"Error loading products: {ex.Message}";
		}
	}

	private async Task SearchProducts()
	{
		try
		{
			products = await ProductService.Search(searchName, searchPrice);
			if (!products.Any())
			{
				errorMessage = "No products match your search criteria.";
			}
			else
			{
				errorMessage = null;
			}
		}
		catch (Exception ex)
		{
			errorMessage = $"Error searching products: {ex.Message}";
		}
	}

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}
}