@page "/shop/details/{productId:int}"
@using BusinessObject.Models
@inject Services.InterfaceService.IProductService ProductService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="container mt-5">
    <h3 class="mb-4 text-primary">Product Details</h3>

    @if (product == null)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="text-muted mt-2">Loading product details...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
        </div>
    }
    else
    {
        <div class="card shadow-lg border-0 rounded-3 p-4 animate__animated animate__fadeIn">
            <div class="row g-4">
                <div class="col-md-4">
                    @if (!string.IsNullOrEmpty(product.ImageUrl))
                    {
                        <div class="image-container">
                            <img src="@product.ImageUrl" alt="@product.ProductName"
                                 class="img-fluid rounded-3 shadow-sm" style="max-width: 100%; height: auto; transition: transform 0.3s ease;" />
                        </div>
                    }
                    else
                    {
                        <div class="text-center p-4 bg-light rounded-3">
                            <i class="bi bi-image text-muted" style="font-size: 3rem;"></i>
                            <p class="text-muted mt-2">No Image Available</p>
                        </div>
                    }
                </div>
                <div class="col-md-8">
                    <h4 class="fw-bold text-dark mb-3">@product.ProductName</h4>
                    <hr class="my-4" style="border-color: #dee2e6;" />
                    <dl class="row mb-4">
                        <dt class="col-sm-3 text-muted">Category</dt>
                        <dd class="col-sm-9 text-dark">@(product.Category?.CategoryName ?? "N/A")</dd>
                        <dt class="col-sm-3 text-muted">Price</dt>
                        <dd class="col-sm-9 text-success fw-bold">@product.UnitPrice.ToString("C")</dd>
                        <dt class="col-sm-3 text-muted">Stock</dt>
                        <dd class="col-sm-9 text-dark">
                            @if (product.UnitsInStock > 0)
                            {
                                <span class="badge bg-success">In Stock (@product.UnitsInStock)</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Out of Stock</span>
                            }
                        </dd>
                    </dl>
                    <div class="d-flex gap-2">
                        <button class="btn btn-success btn-lg px-4 shadow-sm" @onclick="AddToCart">
                            <i class="bi bi-cart-plus me-2"></i>Add to Cart
                        </button>
                        <NavLink class="btn btn-outline-secondary btn-lg px-4 shadow-sm" href="/shop">
                            <i class="bi bi-arrow-left me-2"></i>Back to Shop
                        </NavLink>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    h3.text-primary {
        font-weight: 800;
        text-transform: uppercase;
        letter-spacing: 2px;
        color: #007bff;
        text-align: center;
        background: linear-gradient(90deg, #007bff, #00c6ff);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-size: 2rem;
        padding-bottom: 10px;
        border-bottom: 3px solid #007bff;
        display: inline-block;
        box-shadow: 0px 2px 5px rgba(0, 123, 255, 0.2);
    }

    .card {
        background: #ffffff;
        border-radius: 12px;
        padding: 25px;
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.15);
        }

    .image-container img {
        border-radius: 12px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.1);
    }

        .image-container img:hover {
            transform: scale(1.05);
            box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.2);
        }

    .btn {
        padding: 12px 18px;
        border-radius: 8px;
        font-weight: 700;
        transition: all 0.3s ease;
    }

    .btn-success:hover {
        transform: scale(1.05);
    }

    .badge {
        font-size: 1rem;
        padding: 8px 12px;
        border-radius: 6px;
    }
</style>

@code {
    [Parameter] public int productId { get; set; }
    private Product product;
    private string errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            product = await ProductService.GetById(productId);
            if (product == null)
            {
                errorMessage = "Product not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading product: {ex.Message}";
        }
    }


    private void AddToCart()
    {
        // Logic thêm vào giỏ hàng
    }
}
