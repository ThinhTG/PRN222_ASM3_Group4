@page "/members"
@using BusinessObject.Models
@inject Services.InterfaceService.IMemberService MemberService
@rendermode InteractiveServer

<h3>List Member</h3>

@if (members == null)
{
    <p>Loading...</p>
}
else if (!members.Any())
{
    <p>No members found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>MemberID</th>
                <th>CompanyName</th>
                <th>Email</th>
                <th>City</th>
                <th>Country</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var member in members)
            {
                <tr>
                    <td>@member.MemberId</td>
                    <td>@member.CompanyName</td>
                    <td>@member.Email</td>
                    <td>@member.City</td>
                    <td>@member.Country</td>
                    <td>
                        <button @onclick="() => ConfirmDelete(member.MemberId)" class="btn btn-danger">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showConfirmDelete)
{
    <div class="modal show d-block" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this member?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button class="btn btn-danger" @onclick="DeleteMember">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Member> members;
    private bool showConfirmDelete = false;
    private int memberToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadMembersAsync();
    }

    private async Task LoadMembersAsync()
    {
        var result = await MemberService.GetAllMembersAsync();
        members = result?.ToList() ?? new List<Member>();
    }

    private void ConfirmDelete(int id)
    {
        memberToDelete = id;
        showConfirmDelete = true;
    }

    private void CancelDelete()
    {
        showConfirmDelete = false;
        memberToDelete = 0;
    }

    private async Task DeleteMember()
    {
        if (memberToDelete > 0)
        {
            await MemberService.DeleteMemberAsync(memberToDelete);
            await LoadMembersAsync(); // Cập nhật lại danh sách sau khi xóa
        }
        showConfirmDelete = false;
    }
}
