@page "/categories/details/{Id:int}"
@using BusinessObject.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject Services.InterfaceService.ICategoryService CategoryService
@inject NavigationManager Navigation
@rendermode InteractiveServer
<CascadingAuthenticationState>
	<AuthorizeView>
		<Authorized Context="authContext">
			<div class="container mt-5">
				<h3 class="mb-4 text-primary fw-bold">Category Details</h3>

				@if (category == null)
				{
					<div class="text-center my-5">
						<div class="spinner-border text-primary" role="status">
							<span class="visually-hidden">Loading...</span>
						</div>
						<p class="text-muted mt-2">Loading category details...</p>
					</div>
				}
				else if (!string.IsNullOrEmpty(errorMessage))
				{
					<div class="alert alert-danger alert-dismissible fade show" role="alert">
						@errorMessage
						<button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
					</div>
				}
				else
				{
					<div class="card shadow-lg border-0 rounded-3 p-4 animate__animated animate__fadeIn">
						<div class="row g-4">
							<div class="col-md-4">
								<div class="text-center p-4 bg-light rounded-3">
									<i class="bi bi-tags-fill text-muted" style="font-size: 3rem;"></i>
									<p class="text-muted mt-2">Category Icon</p>
								</div>
							</div>
							<div class="col-md-8">
								<h4 class="fw-bold text-dark mb-3">@category.CategoryName</h4>
								<hr class="my-4" style="border-color: #dee2e6;" />
								<dl class="row mb-4">
									<dt class="col-sm-3 text-muted">ID</dt>
									<dd class="col-sm-9 text-dark">@category.CategoryId</dd>
									<dt class="col-sm-3 text-muted">Description</dt>
									<dd class="col-sm-9 text-dark">@(string.IsNullOrEmpty(category.Description) ? "N/A" : category.Description)</dd>
								</dl>
								<div class="d-flex gap-2">
									<NavLink class="btn btn-primary btn-lg px-4 shadow-sm" href="@($"/categories/edit/{category.CategoryId}")">
										<i class="bi bi-pencil me-2"></i>Edit
									</NavLink>
									<NavLink class="btn btn-outline-secondary btn-lg px-4 shadow-sm" href="/categories">
										<i class="bi bi-arrow-left me-2"></i>Back to List
									</NavLink>
								</div>
							</div>
						</div>
					</div>
				}
			</div>
		</Authorized>
		<NotAuthorized>
			<p class="text-danger">Bạn không có quyền truy cập.</p>
		</NotAuthorized>
	</AuthorizeView>


</CascadingAuthenticationState>
<style>
    h3.text-primary {
        font-weight: 800;
        text-transform: uppercase;
        letter-spacing: 2px;
        color: #007bff;
        text-align: center;
        background: linear-gradient(90deg, #007bff, #00c6ff);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-size: 2rem;
        padding-bottom: 10px;
        border-bottom: 3px solid #007bff;
        display: inline-block;
        box-shadow: 0px 2px 5px rgba(0, 123, 255, 0.2);
    }

    .card {
        background: #ffffff;
        border-radius: 12px;
        padding: 25px;
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.15);
        }

    .image-container img {
        border-radius: 12px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.1);
    }

        .image-container img:hover {
            transform: scale(1.05);
            box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.2);
        }

    .btn {
        padding: 12px 18px;
        border-radius: 8px;
        font-weight: 700;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: linear-gradient(90deg, #007bff, #0056b3);
        border: none;
        color: white;
    }

        .btn-primary:hover {
            background: linear-gradient(90deg, #0056b3, #003580);
            transform: scale(1.05);
        }

    .btn-outline-secondary {
        border-color: #6c757d;
        color: #6c757d;
    }

        .btn-outline-secondary:hover {
            background-color: #6c757d;
            color: white;
        }

    .badge {
        font-size: 1rem;
        padding: 8px 12px;
        border-radius: 6px;
    }

    .spinner-border {
        width: 2.5rem;
        height: 2.5rem;
    }

    .text-muted {
        font-size: 1rem;
        font-weight: 500;
    }

    dl dt {
        font-weight: 600;
        font-size: 1.1rem;
    }

    dl dd {
        font-weight: 700;
        font-size: 1.2rem;
    }
</style>

@code {
	[Parameter]
	public int Id { get; set; }

	private Category category;
	private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            category = await CategoryService.GetById(Id);
            if (category == null)
            {
                errorMessage = "Category not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading category: {ex.Message}";
        }
    }
}