@using Microsoft.AspNetCore.Components.Authorization
@using Services.Service
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<div class="page">
    <div class="sidebar">
    <AdminNavMenu />
    </div>
    @* @if (IsAuthenticated) *@
    @* { *@
    @*     <div class="sidebar"> *@
    @*         @switch (UserRole) *@
    @*         { *@
    @*             case "Admin": *@
    @*                 <AdminNavMenu /> *@
    @*                 break; *@
    @*             case "Customer": *@
    @*                 <CustomerNavMenu /> *@
    @*                 break; *@
    @*             case "Staff": *@
    @*                 <StaffNavMenu /> *@
    @*                 break; *@
    @*             default: *@
    @*                 <GuestNavMenu /> *@
    @*                 break; *@
    @*         } *@
    @*     </div> *@
    @* } *@

    <main>
        <div class="top-row px-4">
            @if (IsAuthenticated)
            {
                <a href="#" class="auth-button logout-button" @onclick="Logout">Logout</a>
            }
            else
            {
                <a href="/login" class="auth-button login-button">Login</a>
                <a href="/register" class="auth-button register-button">Register</a>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool IsAuthenticated { get; set; }
    private string UserRole { get; set; } = "Customer"; // Mặc định là Guest

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var customAuthStateProvider = (CustomAuthStateProvider)AuthStateProvider;
            var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
            IsAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

            if (IsAuthenticated)
            {
                UserRole = await customAuthStateProvider.GetUserRoleAsync();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error retrieving authentication state: {ex.Message}");
        }
    }


    private async Task Logout()
    {
        try
        {
            var customAuthStateProvider = (CustomAuthStateProvider)AuthStateProvider;
            await customAuthStateProvider.LogoutAsync();

            IsAuthenticated = false;
            UserRole = "Customer";
            Navigation.NavigateTo("/shop", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during logout: {ex.Message}");
        }
    }
}

<style>
    /* Giữ nguyên toàn bộ style từ code gốc */
    .page {
        display: flex;
        flex-direction: row;
        min-height: 100vh;
    }

    .sidebar {
        width: 250px;
        background-color: #1e293b;
        flex-shrink: 0;
    }

    main {
        flex: 1;
        background-color: #f8fafc;
    }

    .top-row {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        padding: 1rem;
        background-color: #ffffff;
        border-bottom: 1px solid #e2e8f0;
    }

    .auth-button {
        padding: 8px 16px;
        border-radius: 8px;
        text-decoration: none;
        font-weight: 600;
        font-size: 0.95rem;
        transition: all 0.3s ease;
        display: inline-block;
    }

    .login-button {
        background: linear-gradient(to right, #ed8936, #f56565);
        color: #ffffff;
        margin-right: 10px;
    }

        .login-button:hover {
            background: linear-gradient(to right, #f56565, #ed8936);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

    .register-button {
        background: linear-gradient(to right, #6b7280, #3b82f6);
        color: #ffffff;
    }

        .register-button:hover {
            background: linear-gradient(to right, #3b82f6, #6b7280);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

    .logout-button {
        background: linear-gradient(to right, #dc2626, #f87171);
        color: #ffffff;
    }

        .logout-button:hover {
            background: linear-gradient(to right, #f87171, #dc2626);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

    .content {
        padding: 1rem;
    }

    #blazor-error-ui {
        background-color: #fee2e2;
        color: #dc2626;
        padding: 1rem;
        text-align: center;
        position: fixed;
        bottom: 0;
        width: 100%;
    }

        #blazor-error-ui .reload,
        #blazor-error-ui .dismiss {
            color: #dc2626;
            margin-left: 10px;
            text-decoration: none;
        }

            #blazor-error-ui .reload:hover,
            #blazor-error-ui .dismiss:hover {
                text-decoration: underline;
            }
</style>